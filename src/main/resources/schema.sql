CREATE TABLE IF NOT EXISTS authors
(
    id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     VARCHAR(64) NOT NULL,
    CONSTRAINT   author_is_blank CHECK (name NOT LIKE ' ' AND name NOT LIKE '')
);


CREATE TABLE IF NOT EXISTS genres
(
    id     INTEGER PRIMARY KEY,
    name   VARCHAR(64) NOT NULL
);

CREATE ALIAS IF NOT EXISTS getDate AS
    'java.util.Date getDate() {
    return new java.util.Date();
    }';

CREATE TABLE IF NOT EXISTS users
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(64),
    email        VARCHAR(64) UNIQUE NOT NULL,
    login        VARCHAR(64) NOT NULL,
    birthday     TIMESTAMP,
    CONSTRAINT   email_ CHECK (email LIKE '%@%'),
    CONSTRAINT   login_is_blank CHECK (login NOT LIKE ' ' AND login NOT LIKE ''),
    CONSTRAINT   birthday_not_in_future CHECK (CAST(birthday AS DATE) <= CAST(getDate() AS DATE))
);

CREATE TABLE IF NOT EXISTS books
(
    id           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(64),
    description  VARCHAR(256),
    release_date TIMESTAMP,
    volume       INTEGER,
    rate         INTEGER,
    CONSTRAINT   length_duration
        CHECK (books.volume > 0),
    CONSTRAINT   length_description
        CHECK (LENGTH(description) <= 200),
    CONSTRAINT   name_is_blank
        CHECK (name NOT LIKE ' ' AND NOT NULL)
);


CREATE TABLE IF NOT EXISTS likes
(
    id_user      INTEGER NOT NULL,
    id_book      INTEGER NOT NULL,
    CONSTRAINT   likes_id_user FOREIGN KEY (id_user) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT   likes_id_book FOREIGN KEY (id_book) REFERENCES books (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY  (id_user, id_book)
);

CREATE TABLE IF NOT EXISTS users_friends
(
    id_user_one  INTEGER NOT NULL,
    id_user_two  INTEGER NOT NULL,
    CONSTRAINT   friend_id_user FOREIGN KEY (id_user_one) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT   friend_id_user_two FOREIGN KEY (id_user_two) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY  (id_user_one, id_user_two)
);

CREATE TABLE IF NOT EXISTS book_genres
(
    id_book      INTEGER NOT NULL,
    id_genre     INTEGER NOT NULL,
    CONSTRAINT   films FOREIGN KEY (id_book) REFERENCES books (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT   genres FOREIGN KEY (id_genre) REFERENCES genres (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (id_book, id_genre)
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER NOT NULL,
    film_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    is_positive BOOLEAN NOT NULL DEFAULT TRUE,
    useful INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT fk_film_id FOREIGN KEY (film_id) REFERENCES books(id) ON DELETE CASCADE,
    CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_like (
    review_id INTEGER,
    user_id INTEGER,
    CONSTRAINT fk_review_like_review_id FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
    CONSTRAINT fk_review_like_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS review_dislike (
    review_id INTEGER,
    user_id INTEGER,
    CONSTRAINT fk_review_dislike_review_id FOREIGN KEY (review_id) REFERENCES reviews(review_id) ON DELETE CASCADE,
    CONSTRAINT fk_review_dislike_user_id FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS book_authors
(
    id_book      INTEGER NOT NULL,
    id_author  INTEGER NOT NULL,
    CONSTRAINT   films_dir FOREIGN KEY (id_book) REFERENCES books (id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT   directors_dir FOREIGN KEY (id_author) REFERENCES authors (id) ON DELETE CASCADE ON UPDATE CASCADE,
    PRIMARY KEY (id_book, id_author)
);